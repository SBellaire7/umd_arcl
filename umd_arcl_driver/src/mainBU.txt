#include <ros/ros.h>
#include <string>
#include "../include/arclUtil.hpp"
#include <std_msgs/Int32.h>
#include <std_msgs/Int32MultiArray.h>
#include <std_msgs/Bool.h>

//socket descriptor for arcl server
int sfd = 0;

//callback for move command
void arclMoveCB(const std_msgs::Int32MultiArray& msg)
{
  std::string cmd = "dotask move ";
  cmd = cmd + std::to_string(msg.data[0]) + " "
            + std::to_string(msg.data[1]) + "\n";
  const char* cs = cmd.c_str();
  int nb = socketSend(sfd, cs);
  if(nb < 0) ROS_WARN_STREAM("Move task was unsuccessful\n");
}

void arclRotateCB(const std_msgs::Int32MultiArray& msg)
{
  std::string cmd = "dotask deltaheading ";
  cmd = cmd + std::to_string(msg.data[0]) + " "
            + std::to_string(msg.data[1]) + "\n";
  const char* cs = cmd.c_str();
  int nb = socketSend(sfd, cs);
  if(nb < 0) ROS_WARN_STREAM("Rotate task was unsuccessful\n");
}

void arclGoStopCB(const std_msgs::Bool& msg)
{
  std::string cmd;
  if(msg.data) cmd = "go\n";
  else cmd = "stop\n";
  const char* cs = cmd.c_str();
  int nb = socketSend(sfd, cs);
  if(nb < 0) ROS_WARN_STREAM("Go/Stop task was unsuccessful\n");
}

int main(int argc, char** argv)
{
  //init ros
  ros::init(argc, argv, "arclDriver");
  ros::NodeHandle nh;

  //get parameters
  std::string ip;
  int port;
  std::string pw;
  std::string key;
  nh.searchParam("arcl/ip", key);
  nh.getParam(key, ip);
  nh.searchParam("arcl/port", key);
  nh.getParam(key, port);
  nh.searchParam("arcl/pw", key);
  nh.getParam(key, pw);

  //login to arcl server
  sfd = arclLogin(ip.c_str(), 7171, pw.c_str());
  if(sfd < 0)
  {
    printf("Error logging in. Aborting...\n");
    exit(-1);
  }

  //create subscriber and link to CB function
  ros::Subscriber moveSub = nh.subscribe("arcl/move", 1, &arclMoveCB);
  ros::Subscriber rotateSub = nh.subscribe("arcl/rotate", 1, &arclRotateCB);
  ros::Subscriber gsSub = nh.subscribe("arcl/goStop", 1, &arclGoStopCB);

  //let ros master take over
  char buf[4096];
  ros::Rate rate(50);
  while(ros::ok())
  {
    int n = socketReceiveLine(sfd, buf, 4096);
    ros::spinOnce();
    rate.sleep();
  }

  return 0;
}
